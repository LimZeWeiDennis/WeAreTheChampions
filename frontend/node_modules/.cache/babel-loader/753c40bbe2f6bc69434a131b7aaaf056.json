{"ast":null,"code":"import _toConsumableArray from \"/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/src/modules/Registration.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport './Registration.css';\n\nvar Registration = function Registration() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputText = _useState2[0],\n      setInputText = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMessage = _useState4[0],\n      setErrorMessage = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      teamObjects = _useState6[0],\n      setTeamObjects = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hasError = _useState8[0],\n      setHasError = _useState8[1];\n\n  var localStorageKey = \"team\"; // onChange handler for text field\n\n  var onChangeHandler = function onChangeHandler(event) {\n    setInputText(event.target.value);\n  }; // useEffect to load localstorage into teamObjects first\n\n\n  useEffect(function () {\n    var items = JSON.parse(localStorage.getItem(localStorageKey));\n\n    if (items) {\n      setTeamObjects(items);\n    }\n  }, []); // insert into teamObjects, but first checks if the team is already registered\n\n  var insertTeamObject = function insertTeamObject(newObject) {\n    // check if the current array contains the team\n    for (var i = 0; i < teamObjects.length; i++) {\n      if (teamObjects[i].teamName === newObject.teamName) {\n        return false;\n      }\n    }\n\n    setTeamObjects(function (prevState) {\n      return [].concat(_toConsumableArray(prevState), [newObject]);\n    });\n  };\n\n  var dateIsValid = function dateIsValid(date) {\n    return date instanceof Date && !isNaN(date);\n  };\n\n  var registerInput = function registerInput(input) {\n    var inputArray = input.split(\"\\n\"); // split the input string by new space, since string is from input textbox, no need to check if it is string\n\n    var array = [];\n    var teamNames = new Set(teamObjects.map(function (teamObject) {\n      return teamObject.teamName;\n    })); // example input\n    // teamA 02/12 1\n    // teamb 02/12 2\n    // teamc 03/12 2\n\n    for (var i = 0; i < inputArray.length; i++) {\n      var currString = inputArray[i].split(\" \"); // split subsequent string by space\n      // No need to check for teamName, as there should not be any restrictions on the name\n      // Check for currString[1] DateTime\n\n      try {\n        var dateTime = currString[1].split(\"/\");\n        var date = dateTime[0];\n        var month = dateTime[1];\n        var year = \"2022\";\n        var registrationDate = new Date(year + \"-\" + month + \"-\" + date);\n      } catch (e) {\n        setHasError(true);\n      } // Check for currString[2] group number( shouldnt have more than 2 groups )\n\n\n      var groupNumber = parseInt(currString[2]);\n\n      if (groupNumber <= 0 || groupNumber > 2 || isNaN(groupNumber)) {\n        setHasError(true);\n        console.log(groupNumber);\n        setErrorMessage(\"Input only 1 or 2 for the group number!\");\n      } else {\n        setHasError(false);\n      }\n\n      if (!hasError && !teamNames.has(currString[0])) {\n        array.push({\n          teamName: currString[0],\n          registrationDate: currString[1],\n          groupNumber: currString[2]\n        });\n      } //some function to store the team object;\n\n    }\n\n    var newTeamObjects = [].concat(_toConsumableArray(teamObjects), array);\n    setTeamObjects(newTeamObjects);\n    var newData = JSON.stringify(newTeamObjects);\n    localStorage.setItem(localStorageKey, newData);\n  }; // useEffect(() => {\n  //     const teamObjectsUpdatedNotif = async() => {\n  //         console.log(teamObjects);\n  //         const newData = JSON.stringify(teamObjects);\n  //         await localStorage.setItem(localStorageKey, newData);\n  //     }\n  //     teamObjectsUpdatedNotif();\n  // }, [teamObjects])\n\n\n  var onSubmitHandler = function onSubmitHandler() {\n    registerInput(inputText);\n    setInputText(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Registration\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Register Teams\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Instructions\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, \" Please input the teams in the following format: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 69\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 74\n    }\n  }), \"Team_Name (space) Registration_Date DD/MM (space) Group_Number \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 81\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 86\n    }\n  }), \"e.g TeamA 06/19 1 \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 36\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 41\n    }\n  }), \"Each input can be separated by a new line(i.e Enter)\")), /*#__PURE__*/React.createElement(TextField, {\n    className: \"Text-Field\",\n    id: \"outlined-multiline-static\",\n    label: \"Teams Date Group Number\",\n    multiline: true,\n    minRows: 5,\n    maxRows: 10,\n    value: inputText,\n    onChange: onChangeHandler,\n    variant: \"outlined\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Buttons\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"Submit\",\n    variant: \"contained\",\n    onClick: onSubmitHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, \" Submit \")), hasError ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Error-Message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, errorMessage) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }));\n};\n\nexport default Registration;","map":{"version":3,"names":["React","useEffect","useState","TextField","Button","Registration","inputText","setInputText","errorMessage","setErrorMessage","teamObjects","setTeamObjects","hasError","setHasError","localStorageKey","onChangeHandler","event","target","value","items","JSON","parse","localStorage","getItem","insertTeamObject","newObject","i","length","teamName","prevState","dateIsValid","date","Date","isNaN","registerInput","input","inputArray","split","array","teamNames","Set","map","teamObject","currString","dateTime","month","year","registrationDate","e","groupNumber","parseInt","console","log","has","push","newTeamObjects","newData","stringify","setItem","onSubmitHandler"],"sources":["/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/src/modules/Registration.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport './Registration.css';\n\nconst Registration = () => {\n    const [inputText, setInputText] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [teamObjects, setTeamObjects] = useState([]);\n    const [hasError, setHasError] = useState(false);\n    const localStorageKey = \"team\";\n\n    // onChange handler for text field\n    const onChangeHandler = (event) => {\n        setInputText(event.target.value);\n    }\n\n    // useEffect to load localstorage into teamObjects first\n    useEffect(() => {\n        const items = JSON.parse(localStorage.getItem(localStorageKey));\n        if(items){\n            setTeamObjects(items);\n        }\n    }, [])\n    \n    // insert into teamObjects, but first checks if the team is already registered\n    const insertTeamObject = (newObject) => {\n        // check if the current array contains the team\n        for(let i = 0; i < teamObjects.length; i ++){\n            if(teamObjects[i].teamName === newObject.teamName){\n                return false;\n            }\n        }\n        setTeamObjects(prevState => (\n            [...prevState, newObject]\n        ))\n    }\n\n    const dateIsValid = (date) => {\n        return date instanceof Date && !isNaN(date);\n    }\n\n    const registerInput = (input) => {\n        const inputArray = input.split(\"\\n\");  // split the input string by new space, since string is from input textbox, no need to check if it is string\n        const array = [];\n        let teamNames = new Set(teamObjects.map(teamObject => teamObject.teamName));\n        // example input\n        // teamA 02/12 1\n        // teamb 02/12 2\n        // teamc 03/12 2\n        for(let i = 0; i < inputArray.length; i ++){\n            const currString = inputArray[i].split(\" \"); // split subsequent string by space\n\n            // No need to check for teamName, as there should not be any restrictions on the name\n\n            // Check for currString[1] DateTime\n            try{\n                const dateTime = currString[1].split(\"/\");\n                const date = dateTime[0];\n                const month = dateTime[1];\n                const year = \"2022\";\n                const registrationDate = new Date(year + \"-\" + month + \"-\" + date);\n\n            } catch (e){\n                setHasError(true);\n            }\n            \n            // Check for currString[2] group number( shouldnt have more than 2 groups )\n            const groupNumber = parseInt(currString[2]);\n            if(groupNumber <= 0 || groupNumber > 2 || isNaN(groupNumber)) {\n                setHasError(true);\n                console.log(groupNumber);\n                setErrorMessage(\"Input only 1 or 2 for the group number!\");\n            } else {\n                setHasError(false);\n            }\n\n            if(!hasError && !teamNames.has(currString[0])){\n                array.push({teamName: currString[0], registrationDate: currString[1], groupNumber: currString[2]});\n            }\n\n            //some function to store the team object;\n        }\n        const newTeamObjects = [...teamObjects, ...array];\n        setTeamObjects(newTeamObjects);\n\n        const newData = JSON.stringify(newTeamObjects);\n        localStorage.setItem(localStorageKey, newData);\n\n    }\n\n    // useEffect(() => {\n    //     const teamObjectsUpdatedNotif = async() => {\n    //         console.log(teamObjects);\n    //         const newData = JSON.stringify(teamObjects);\n    //         await localStorage.setItem(localStorageKey, newData);\n    //     }\n    //     teamObjectsUpdatedNotif();\n    // }, [teamObjects])\n\n\n    const onSubmitHandler = () => {\n        registerInput(inputText);\n        setInputText(\"\");\n    }\n\n    return (\n        <div className=\"Registration\" >\n            <h1>Register Teams</h1>\n            <div className=\"Instructions\">\n                \n                <p> Please input the teams in the following format: <br/><br/>\n                 Team_Name (space) Registration_Date DD/MM (space) Group_Number <br/><br/>\n                 e.g TeamA 06/19 1 <br/><br/>           \n                 Each input can be separated by a new line(i.e Enter)\n                 </p>\n            </div>\n\n            <TextField className=\"Text-Field\" \n                       id=\"outlined-multiline-static\" \n                       label=\"Teams Date Group Number\" \n                       multiline \n                       minRows={5}\n                       maxRows={10} \n                       value={inputText} \n                       onChange={onChangeHandler} \n                       variant=\"outlined\" />\n\n            <div className=\"Buttons\">\n                <Button className=\"Submit\" variant=\"contained\" onClick={onSubmitHandler}> Submit </Button>\n            </div>\n\n            {hasError \n                ?\n                    <div className=\"Error-Message\">{errorMessage}</div>\n                \n                :\n                    <div></div>\n            }\n        </div>\n        \n    )\n} \n\nexport default Registration;"],"mappings":"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"},"metadata":{},"sourceType":"module"}