{"ast":null,"code":"var _jsxFileName = \"/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/src/modules/Registration.js\";\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Registration = () => {\n  const [inputText, setInputText] = new useState(\"\");\n  const [teamObjects, setTeamObjects] = new useState([]);\n  const [hasError, setHasError] = new useState(false);\n\n  const onChangeHandler = event => {\n    setInputText(event.target.value);\n  };\n\n  const insertTeamObject = newObject => {\n    setTeamObjects(prevState => [...prevState, newObject]);\n  };\n\n  const registerInput = input => {\n    const inputArray = input.split(\"\\n\"); // split the input string by new space, since string is from input textbox, no need to check if it is string\n    // example input\n    // teamA 02/12 1\n    // teamb 02/12 2\n    // teamc 03/12 2\n\n    for (var i = 0; i < inputArray.length; i++) {\n      const currString = inputArray[i].split(\" \"); // No need to check for teamName, as there should not be any restrictions\n      // Check for currString[1] DateTime\n\n      try {\n        const dateTime = currString[1].split(\"/\");\n      } catch (e) {} // Check for currString[2] group number( shouldnt have more than 2 groups )\n\n\n      const groupNumber = Integer.parseInt(currString[2]);\n\n      if (groupNumber <= 0 || groupNumber > 2) {\n        console.log(\"Input only 1 or 2 for the group number\");\n      }\n\n      insertTeamObject({\n        teamName: currString[0],\n        registrationDate: currString[1],\n        groupNumber: currString[2]\n      }); //some function to store the team object;\n    }\n  };\n\n  const onSubmitHandler = async () => {\n    await registerInput(inputText);\n\n    if (!hasError) {\n      await stringify(teamObjects);\n    } // setInputText(\"\");\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      className: \"Text-Field\",\n      id: \"outlined-multiline-flexible\",\n      label: \"Teams Date Group Number\",\n      multiline: true,\n      maxRows: 5,\n      value: inputText,\n      onChange: onChangeHandler,\n      variant: \"standard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: onSubmitHandler,\n      children: \" Submit \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), hasError ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"problem la\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Registration;\nexport default Registration;\n\nvar _c;\n\n$RefreshReg$(_c, \"Registration\");","map":{"version":3,"names":["React","useState","TextField","Button","Registration","inputText","setInputText","teamObjects","setTeamObjects","hasError","setHasError","onChangeHandler","event","target","value","insertTeamObject","newObject","prevState","registerInput","input","inputArray","split","i","length","currString","dateTime","e","groupNumber","Integer","parseInt","console","log","teamName","registrationDate","onSubmitHandler","stringify"],"sources":["/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/src/modules/Registration.js"],"sourcesContent":["import React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\n\nconst Registration = () => {\n    const [inputText, setInputText] = new useState(\"\");\n    const [teamObjects, setTeamObjects] = new useState([]);\n    const [hasError, setHasError] = new useState(false);\n\n    const onChangeHandler = (event) => {\n        setInputText(event.target.value);\n    }\n    \n    const insertTeamObject = (newObject) => {\n        setTeamObjects(prevState => (\n            [... prevState, newObject]\n        ))\n    }\n\n    const registerInput = (input) => {\n        const inputArray = input.split(\"\\n\");  // split the input string by new space, since string is from input textbox, no need to check if it is string\n\n        // example input\n        // teamA 02/12 1\n        // teamb 02/12 2\n        // teamc 03/12 2\n        for(var i = 0; i < inputArray.length; i ++){\n            const currString = inputArray[i].split(\" \");\n            // No need to check for teamName, as there should not be any restrictions\n\n            // Check for currString[1] DateTime\n            try{\n                const dateTime = currString[1].split(\"/\");\n            } catch (e){\n\n            }\n            \n            // Check for currString[2] group number( shouldnt have more than 2 groups )\n            const groupNumber = Integer.parseInt(currString[2]);\n            if(groupNumber <= 0 || groupNumber > 2){\n                console.log(\"Input only 1 or 2 for the group number\")\n            }\n\n            insertTeamObject({teamName: currString[0], registrationDate: currString[1], groupNumber: currString[2]});\n\n            //some function to store the team object;\n        }\n    }\n\n    const onSubmitHandler = async () => {\n        await registerInput(inputText);\n\n        if(!hasError){\n            await stringify(teamObjects);\n        }\n        // setInputText(\"\");\n    }\n\n    return (\n        <div>\n            <TextField className=\"Text-Field\" \n                       id=\"outlined-multiline-flexible\" \n                       label=\"Teams Date Group Number\" \n                       multiline \n                       maxRows={5} \n                       value={inputText} \n                       onChange={onChangeHandler} \n                       variant=\"standard\" />\n\n            <Button variant=\"outlined\" onClick={onSubmitHandler}> Submit </Button>\n\n            {hasError \n                ?\n                    <p>problem la</p>\n                \n                :\n                    <div></div>\n            }\n        </div>\n        \n    )\n} \n\nexport default Registration;"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAGA,MAAMC,YAAY,GAAG,MAAM;EACvB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,IAAIL,QAAJ,CAAa,EAAb,CAAlC;EACA,MAAM,CAACM,WAAD,EAAcC,cAAd,IAAgC,IAAIP,QAAJ,CAAa,EAAb,CAAtC;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0B,IAAIT,QAAJ,CAAa,KAAb,CAAhC;;EAEA,MAAMU,eAAe,GAAIC,KAAD,IAAW;IAC/BN,YAAY,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;EACH,CAFD;;EAIA,MAAMC,gBAAgB,GAAIC,SAAD,IAAe;IACpCR,cAAc,CAACS,SAAS,IACpB,CAAC,GAAIA,SAAL,EAAgBD,SAAhB,CADU,CAAd;EAGH,CAJD;;EAMA,MAAME,aAAa,GAAIC,KAAD,IAAW;IAC7B,MAAMC,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAY,IAAZ,CAAnB,CAD6B,CACU;IAEvC;IACA;IACA;IACA;;IACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,UAAU,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;MACvC,MAAME,UAAU,GAAGJ,UAAU,CAACE,CAAD,CAAV,CAAcD,KAAd,CAAoB,GAApB,CAAnB,CADuC,CAEvC;MAEA;;MACA,IAAG;QACC,MAAMI,QAAQ,GAAGD,UAAU,CAAC,CAAD,CAAV,CAAcH,KAAd,CAAoB,GAApB,CAAjB;MACH,CAFD,CAEE,OAAOK,CAAP,EAAS,CAEV,CATsC,CAWvC;;;MACA,MAAMC,WAAW,GAAGC,OAAO,CAACC,QAAR,CAAiBL,UAAU,CAAC,CAAD,CAA3B,CAApB;;MACA,IAAGG,WAAW,IAAI,CAAf,IAAoBA,WAAW,GAAG,CAArC,EAAuC;QACnCG,OAAO,CAACC,GAAR,CAAY,wCAAZ;MACH;;MAEDhB,gBAAgB,CAAC;QAACiB,QAAQ,EAAER,UAAU,CAAC,CAAD,CAArB;QAA0BS,gBAAgB,EAAET,UAAU,CAAC,CAAD,CAAtD;QAA2DG,WAAW,EAAEH,UAAU,CAAC,CAAD;MAAlF,CAAD,CAAhB,CAjBuC,CAmBvC;IACH;EACJ,CA5BD;;EA8BA,MAAMU,eAAe,GAAG,YAAY;IAChC,MAAMhB,aAAa,CAACb,SAAD,CAAnB;;IAEA,IAAG,CAACI,QAAJ,EAAa;MACT,MAAM0B,SAAS,CAAC5B,WAAD,CAAf;IACH,CAL+B,CAMhC;;EACH,CAPD;;EASA,oBACI;IAAA,wBACI,QAAC,SAAD;MAAW,SAAS,EAAC,YAArB;MACW,EAAE,EAAC,6BADd;MAEW,KAAK,EAAC,yBAFjB;MAGW,SAAS,MAHpB;MAIW,OAAO,EAAE,CAJpB;MAKW,KAAK,EAAEF,SALlB;MAMW,QAAQ,EAAEM,eANrB;MAOW,OAAO,EAAC;IAPnB;MAAA;MAAA;MAAA;IAAA,QADJ,eAUI,QAAC,MAAD;MAAQ,OAAO,EAAC,UAAhB;MAA2B,OAAO,EAAEuB,eAApC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAVJ,EAYKzB,QAAQ,gBAED;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFC,gBAKD;MAAA;MAAA;MAAA;IAAA,QAjBZ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAuBH,CA7ED;;KAAML,Y;AA+EN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}