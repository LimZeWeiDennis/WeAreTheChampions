{"ast":null,"code":"import _asyncToGenerator from \"/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/src/modules/Registration.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport React, { useEffect, useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport './Registration.css'; // import {fs} from 'fs';\n\nvar Registration = function Registration() {\n  var _useState = new useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputText = _useState2[0],\n      setInputText = _useState2[1];\n\n  var _useState3 = new useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      teamObjects = _useState4[0],\n      setTeamObjects = _useState4[1];\n\n  var _useState5 = new useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hasError = _useState6[0],\n      setHasError = _useState6[1];\n\n  var onChangeHandler = function onChangeHandler(event) {\n    setInputText(event.target.value);\n  };\n\n  var insertTeamObject = function insertTeamObject(newObject) {\n    setTeamObjects(function (prevState) {\n      return [].concat(_toConsumableArray(prevState), [newObject]);\n    });\n  };\n\n  var registerInput = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n      var inputArray, i, currString, groupNumber;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              inputArray = input.split(\"\\n\"); // split the input string by new space, since string is from input textbox, no need to check if it is string\n              // example input\n              // teamA 02/12 1\n              // teamb 02/12 2\n              // teamc 03/12 2\n\n              i = 0;\n\n            case 2:\n              if (!(i < inputArray.length)) {\n                _context.next = 15;\n                break;\n              }\n\n              currString = inputArray[i].split(\" \"); // split subsequent string by space\n              // No need to check for teamName, as there should not be any restrictions on the name\n              // Check for currString[1] DateTime\n              // try{\n              //     const dateTime = currString[1].split(\"/\");\n              // } catch (e){\n              //     setHasError(true);\n              // }\n              // Check for currString[2] group number( shouldnt have more than 2 groups )\n\n              groupNumber = parseInt(currString[2]);\n\n              if (!(groupNumber <= 0 || groupNumber > 2)) {\n                _context.next = 9;\n                break;\n              }\n\n              setHasError(true);\n              console.log(groupNumber);\n              throw Error(\"Input only 1 or 2 for the group number!\");\n\n            case 9:\n              if (hasError) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 12;\n              return insertTeamObject({\n                teamName: currString[0],\n                registrationDate: currString[1],\n                groupNumber: currString[2]\n              });\n\n            case 12:\n              i++;\n              _context.next = 2;\n              break;\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function registerInput(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    console.log(teamObjects);\n\n    var teamObjectsUpdatedNotif = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(teamObjects);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function teamObjectsUpdatedNotif() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }, [teamObjects]);\n\n  var onSubmitHandler = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return registerInput(inputText);\n\n            case 2:\n              // if(!hasError){\n              //     const newData = JSON.stringify(teamObjects);\n              //     console.log(newData);\n              //     await localStorage.setItem(\"knn\", newData);\n              // }\n              setInputText(\"\");\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function onSubmitHandler() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Registration\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Register Teams\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Instructions\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, \" Please input the teams in the following format: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 69\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 74\n    }\n  }), \"Team_Name (space) Registration_Date DD/MM (space) Group_Number \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 81\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 86\n    }\n  }), \"e.g TeamA 06/19 1 \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 36\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 41\n    }\n  }), \"Each input can be separated by a new line(i.e Enter)\")), /*#__PURE__*/React.createElement(TextField, {\n    className: \"Text-Field\",\n    id: \"outlined-multiline-static\",\n    label: \"Teams Date Group Number\",\n    multiline: true,\n    minRows: 5,\n    maxRows: 5,\n    value: inputText,\n    onChange: onChangeHandler,\n    variant: \"outlined\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Buttons\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"Submit\",\n    variant: \"contained\",\n    onClick: onSubmitHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \" Submit \")), hasError ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, \"problem la\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }));\n};\n\nexport default Registration;","map":{"version":3,"names":["React","useEffect","useState","TextField","Button","Registration","inputText","setInputText","teamObjects","setTeamObjects","hasError","setHasError","onChangeHandler","event","target","value","insertTeamObject","newObject","prevState","registerInput","input","inputArray","split","i","length","currString","groupNumber","parseInt","console","log","Error","teamName","registrationDate","teamObjectsUpdatedNotif","onSubmitHandler"],"sources":["/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/src/modules/Registration.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport './Registration.css';\n// import {fs} from 'fs';\n\n\nconst Registration = () => {\n    const [inputText, setInputText] = new useState(\"\");\n    const [teamObjects, setTeamObjects] = new useState([]);\n    const [hasError, setHasError] = new useState(false);\n\n    const onChangeHandler = (event) => {\n        setInputText(event.target.value);\n    }\n    \n    const insertTeamObject = (newObject) => {\n        setTeamObjects(prevState => (\n            [...prevState, newObject]\n        ))\n    }\n\n    const registerInput = async(input) => {\n        const inputArray = input.split(\"\\n\");  // split the input string by new space, since string is from input textbox, no need to check if it is string\n\n        // example input\n        // teamA 02/12 1\n        // teamb 02/12 2\n        // teamc 03/12 2\n        for(var i = 0; i < inputArray.length; i ++){\n            const currString = inputArray[i].split(\" \"); // split subsequent string by space\n\n            // No need to check for teamName, as there should not be any restrictions on the name\n\n            // Check for currString[1] DateTime\n            // try{\n            //     const dateTime = currString[1].split(\"/\");\n            // } catch (e){\n            //     setHasError(true);\n            // }\n            \n            // Check for currString[2] group number( shouldnt have more than 2 groups )\n            const groupNumber = parseInt(currString[2]);\n            if(groupNumber <= 0 || groupNumber > 2){\n                setHasError(true);\n                console.log(groupNumber);\n                throw Error(\"Input only 1 or 2 for the group number!\");\n            }\n\n            if(!hasError){\n                await insertTeamObject({teamName: currString[0], registrationDate: currString[1], groupNumber: currString[2]});\n            }\n\n            //some function to store the team object;\n        }\n    }\n\n    useEffect(() => {\n        console.log(teamObjects);\n        const teamObjectsUpdatedNotif = async() => {\n            console.log(teamObjects);\n        }\n    }, [teamObjects])\n\n    const onSubmitHandler = async () => {\n        await registerInput(inputText);\n\n        // if(!hasError){\n        //     const newData = JSON.stringify(teamObjects);\n        //     console.log(newData);\n        //     await localStorage.setItem(\"knn\", newData);\n\n        // }\n        setInputText(\"\");\n    }\n\n    return (\n        <div className=\"Registration\" >\n            <h1>Register Teams</h1>\n            <div className=\"Instructions\">\n                \n                <p> Please input the teams in the following format: <br/><br/>\n                 Team_Name (space) Registration_Date DD/MM (space) Group_Number <br/><br/>\n                 e.g TeamA 06/19 1 <br/><br/>           \n                 Each input can be separated by a new line(i.e Enter)\n                 </p>\n            </div>\n\n            <TextField className=\"Text-Field\" \n                       id=\"outlined-multiline-static\" \n                       label=\"Teams Date Group Number\" \n                       multiline \n                       minRows={5}\n                       maxRows={5} \n                       value={inputText} \n                       onChange={onChangeHandler} \n                       variant=\"outlined\" />\n\n            <div className=\"Buttons\">\n                <Button className=\"Submit\" variant=\"contained\" onClick={onSubmitHandler}> Submit </Button>\n            </div>\n\n            {hasError \n                ?\n                    <p>problem la</p>\n                \n                :\n                    <div></div>\n            }\n        </div>\n        \n    )\n} \n\nexport default Registration;"],"mappings":"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"},"metadata":{},"sourceType":"module"}