{"ast":null,"code":"import _toConsumableArray from \"/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/src/modules/Registration.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport { isExists } from \"date-fns\";\nimport \"./Registration.css\";\n\nvar Registration = function Registration() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputText = _useState2[0],\n      setInputText = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMessage = _useState4[0],\n      setErrorMessage = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      teamObjects = _useState6[0],\n      setTeamObjects = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hasError = _useState8[0],\n      setHasError = _useState8[1];\n\n  var localStorageKey = \"team\"; // onChange handler for text field\n\n  var onChangeHandler = function onChangeHandler(event) {\n    setInputText(event.target.value);\n  }; // useEffect to load localstorage into teamObjects first\n\n\n  useEffect(function () {\n    var items = JSON.parse(localStorage.getItem(localStorageKey));\n\n    if (items) {\n      setTeamObjects(items);\n    }\n  }, []);\n\n  var registerInput = function registerInput(input) {\n    var inputArray = input.split(\"\\n\"); // split the input string by new space, since string is from input textbox, no need to check if it is string\n\n    var teamsArray = [];\n    var teamNames = new Set(teamObjects.map(function (teamObject) {\n      return teamObject.teamName;\n    }));\n    var isErrorInput = false; // example input\n    // teamA 02/12 1\n    // teamb 02/12 2\n    // teamc 03/12 2\n\n    for (var i = 0; i < inputArray.length; i++) {\n      var currString = inputArray[i].split(\" \"); // split subsequent string by space\n      // No need to check for teamName, as there should not be any restrictions on the name\n      // Check for currString[1] DateTime\n\n      var dateTime = currString[1].split(\"/\");\n      var date = parseInt(dateTime[0]);\n      var month = parseInt(dateTime[1]);\n      var year = 2022;\n      console.log(year + \"-\" + month + \"-\" + date);\n\n      if (!isExists(year, month - 1, date)) {\n        isErrorInput = true;\n        setErrorMessage(\"Input a proper date!\");\n      }\n\n      var registrationDate = new Date(year + \"-\" + month + \"-\" + date); // Check for currString[2] group number( shouldnt have more than 2 groups )\n\n      var groupNumber = parseInt(currString[2]);\n\n      if (groupNumber <= 0 || groupNumber > 2 || isNaN(groupNumber)) {\n        isErrorInput = true;\n        setErrorMessage(\"Input only 1 or 2 for the group number!\");\n      }\n\n      if (!isErrorInput && !teamNames.has(currString[0])) {\n        teamsArray.push({\n          teamName: currString[0],\n          registrationDate: registrationDate,\n          groupNumber: groupNumber\n        });\n      } //some function to store the team object;\n\n    }\n\n    setHasError(isErrorInput);\n    var newTeamObjects = [].concat(_toConsumableArray(teamObjects), teamsArray);\n    setTeamObjects(newTeamObjects);\n    var newData = JSON.stringify(newTeamObjects);\n    localStorage.setItem(localStorageKey, newData);\n  }; // useEffect(() => {\n  //     const teamObjectsUpdatedNotif = async() => {\n  //         console.log(teamObjects);\n  //         const newData = JSON.stringify(teamObjects);\n  //         await localStorage.setItem(localStorageKey, newData);\n  //     }\n  //     teamObjectsUpdatedNotif();\n  // }, [teamObjects])\n\n\n  var onSubmitHandler = function onSubmitHandler() {\n    registerInput(inputText);\n    setInputText(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Registration\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Register Teams\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Instructions\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \" \", \"Please input the teams in the following format: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 59\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }), \"Team_Name (space) Registration_Date DD/MM (space) Group_Number \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 74\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }), \"e.g TeamA 06/19 1 \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }), \"Each input can be separated by a new line(i.e Enter)\")), /*#__PURE__*/React.createElement(TextField, {\n    className: \"Text-Field\",\n    id: \"outlined-multiline-static\",\n    label: \"Teams Date Group Number\",\n    multiline: true,\n    minRows: 5,\n    value: inputText,\n    onChange: onChangeHandler,\n    variant: \"outlined\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), hasError ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Error-Message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, errorMessage) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Buttons\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"Submit\",\n    variant: \"contained\",\n    onClick: onSubmitHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, \" \", \"Submit\", \" \")));\n};\n\nexport default Registration;","map":{"version":3,"names":["React","useEffect","useState","TextField","Button","isExists","Registration","inputText","setInputText","errorMessage","setErrorMessage","teamObjects","setTeamObjects","hasError","setHasError","localStorageKey","onChangeHandler","event","target","value","items","JSON","parse","localStorage","getItem","registerInput","input","inputArray","split","teamsArray","teamNames","Set","map","teamObject","teamName","isErrorInput","i","length","currString","dateTime","date","parseInt","month","year","console","log","registrationDate","Date","groupNumber","isNaN","has","push","newTeamObjects","newData","stringify","setItem","onSubmitHandler"],"sources":["/Users/Douglas/Desktop/govtech/soccer/we-are-the-champions/src/modules/Registration.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport { isExists } from \"date-fns\";\n\nimport \"./Registration.css\";\n\nconst Registration = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [teamObjects, setTeamObjects] = useState([]);\n  const [hasError, setHasError] = useState(false);\n  const localStorageKey = \"team\";\n\n  // onChange handler for text field\n  const onChangeHandler = (event) => {\n    setInputText(event.target.value);\n  };\n\n  // useEffect to load localstorage into teamObjects first\n  useEffect(() => {\n    const items = JSON.parse(localStorage.getItem(localStorageKey));\n    if (items) {\n      setTeamObjects(items);\n    }\n  }, []);\n\n  const registerInput = (input) => {\n    const inputArray = input.split(\"\\n\"); // split the input string by new space, since string is from input textbox, no need to check if it is string\n    const teamsArray = [];\n    let teamNames = new Set(\n      teamObjects.map((teamObject) => teamObject.teamName)\n    );\n    let isErrorInput = false;\n    // example input\n    // teamA 02/12 1\n    // teamb 02/12 2\n    // teamc 03/12 2\n    for (let i = 0; i < inputArray.length; i++) {\n      const currString = inputArray[i].split(\" \"); // split subsequent string by space\n\n      // No need to check for teamName, as there should not be any restrictions on the name\n\n      // Check for currString[1] DateTime\n\n      const dateTime = currString[1].split(\"/\");\n      const date = parseInt(dateTime[0]);\n      const month = parseInt(dateTime[1]);\n      const year = 2022;\n\n      console.log(year + \"-\" + month + \"-\" + date);\n\n      if (!isExists(year, month - 1, date)) {\n        isErrorInput = true;\n        setErrorMessage(\"Input a proper date!\");\n      }\n\n      const registrationDate = new Date(year + \"-\" + month + \"-\" + date);\n\n      // Check for currString[2] group number( shouldnt have more than 2 groups )\n      const groupNumber = parseInt(currString[2]);\n\n      if (groupNumber <= 0 || groupNumber > 2 || isNaN(groupNumber)) {\n        isErrorInput = true;\n        setErrorMessage(\"Input only 1 or 2 for the group number!\");\n      }\n\n      if (!isErrorInput && !teamNames.has(currString[0])) {\n        teamsArray.push({\n          teamName: currString[0],\n          registrationDate: registrationDate,\n          groupNumber: groupNumber,\n        });\n      }\n\n      //some function to store the team object;\n    }\n    setHasError(isErrorInput);\n    const newTeamObjects = [...teamObjects, ...teamsArray];\n    setTeamObjects(newTeamObjects);\n\n    const newData = JSON.stringify(newTeamObjects);\n    localStorage.setItem(localStorageKey, newData);\n  };\n\n  // useEffect(() => {\n  //     const teamObjectsUpdatedNotif = async() => {\n  //         console.log(teamObjects);\n  //         const newData = JSON.stringify(teamObjects);\n  //         await localStorage.setItem(localStorageKey, newData);\n  //     }\n  //     teamObjectsUpdatedNotif();\n  // }, [teamObjects])\n\n  const onSubmitHandler = () => {\n    registerInput(inputText);\n    setInputText(\"\");\n  };\n\n  return (\n    <div className=\"Registration\">\n      <h1>Register Teams</h1>\n      <div className=\"Instructions\">\n        <p>\n          {\" \"}\n          Please input the teams in the following format: <br />\n          <br />\n          Team_Name (space) Registration_Date DD/MM (space) Group_Number <br />\n          <br />\n          e.g TeamA 06/19 1 <br />\n          <br />\n          Each input can be separated by a new line(i.e Enter)\n        </p>\n      </div>\n\n      <TextField\n        className=\"Text-Field\"\n        id=\"outlined-multiline-static\"\n        label=\"Teams Date Group Number\"\n        multiline\n        minRows={5}\n        value={inputText}\n        onChange={onChangeHandler}\n        variant=\"outlined\"\n      />\n      {hasError ? (\n        <div className=\"Error-Message\">{errorMessage}</div>\n      ) : (\n        <div></div>\n      )}\n\n      <div className=\"Buttons\">\n        <Button\n          className=\"Submit\"\n          variant=\"contained\"\n          onClick={onSubmitHandler}\n        >\n          {\" \"}\n          Submit{\" \"}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Registration;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}